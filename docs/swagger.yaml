openapi: 3.0.0
info:
  title: Currency Exchange API
  version: 1.0.0
  description: API for managing currencies, users, and watchlists
servers:
  - url: http://localhost:3000

tags:
  - name: Currency
  - name: User
  - name: Watchlist

paths:
  /currency:
    get:
      tags: [Currency]
      summary: List all currencies
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: A list of currencies
    post:
      tags: [Currency]
      summary: Create a new currency
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyCreateReq'
            example:
              code: EUR
              name: Euro
              symbol: â‚¬
              country: European Union
      responses:
        '201':
          description: Currency created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Currency code already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /currency/{code}:
    get:
      tags: [Currency]
      summary: Get one currency by ISO code
      parameters:
        - $ref: '#/components/parameters/CodePath'
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Currency]
      summary: Update a currency by code
      parameters:
        - $ref: '#/components/parameters/CodePath'
        - $ref: '#/components/parameters/NameQuery'
        - $ref: '#/components/parameters/CountryQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyUpdateReq'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Currency]
      summary: Delete a currency by code
      parameters:
        - $ref: '#/components/parameters/CodePath'
      responses:
        '204':
          description: Deleted (no content)
        '404':
          $ref: '#/components/responses/NotFound'

  /user/register:
    post:
      tags: [User]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User registered successfully

  /user/login:
    post:
      tags: [User]
      summary: Login an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
        '401':
          description: Unauthorized

  /user/logout:
    post:
      tags: [User]
      summary: Logout current user
      responses:
        '200':
          description: Logout successful

  /user/profile:
    get:
      tags: [User]
      summary: Get current user profile by ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile data
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  email:
                    type: string
        '401':
          description: Unauthorized

    put:
      tags: [User]
      summary: Update user profile
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User updated

  /user/delete:
    delete:
      tags: [User]
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted

  # /user/search:
  #   get:
  #     tags: [User]
  #     summary: Search users
  #     parameters:
  #       - in: query
  #         name: email
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: Matching users

  /watchlist:
    get:
      tags: [Watchlist]
      summary: List all watchlists
      responses:
        '200':
          description: A list of watchlists
    post:
      tags: [Watchlist]
      summary: Create a watchlist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Watchlist'
      responses:
        '201':
          description: Watchlist created

  /watchlist/{id}:
    get:
      tags: [Watchlist]
      summary: Get watchlist by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Watchlist found
    put:
      tags: [Watchlist]
      summary: Update a watchlist
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Watchlist'
      responses:
        '200':
          description: Watchlist updated
    delete:
      tags: [Watchlist]
      summary: Delete a watchlist
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Watchlist deleted

  /watchlist/search:
    get:
      tags: [Watchlist]
      summary: Search watchlists
      parameters:
        - in: query
          name: userId
          schema:
            type: string
      responses:
        '200':
          description: Matching watchlists

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    CodePath:
      name: code
      in: path
      required: true
      description: ISO 4217 currency code (e.g., USD)
      schema:
        type: string
        minLength: 3
        maxLength: 3
        example: USD
    CodeQuery:
      name: code
      in: query
      required: false
      description: Partial or exact currency code
      schema:
        type: string
        example: US
    NameQuery:
      name: name
      in: query
      required: false
      description: Full name of the currency
      schema:
        type: string
        example: United States Dollar
    CountryQuery:
      name: country
      in: query
      required: false
      description: Country name of the currency
      schema:
        type: string
        example: United States
    SymbolQuery:
      name: symbol
      in: query
      required: false
      description: Currency symbol
      schema:
        type: string
        example: $
    Limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 20
      description: Page size
    Offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Skip how many items

  responses:
    BadRequest:
      description: Bad request / validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Currency:
      type: object
      required: [code, name, symbol, country]
      properties:
        code:
          type: string
          description: ISO 4217 currency code (3 letters)
          example: USD
        name:
          type: string
          example: United States Dollar
        symbol:
          type: string
          example: $
        country:
          type: string
          example: United States

    CurrencyCreateReq:
      type: object
      properties:
        name:
          type: string
        country:
          type: string

    CurrencyUpdateReq:
      type: object
      description: Fields allowed to update
      properties:
        name:
          type: string
        country:
          type: string
      additionalProperties: false

    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        password:
          type: string
        create_time:
          type: string
        update_time:
          type: string

    Error:
      type: object
      properties:
        status:
          type: integer
          example: 400
        error:
          type: string
          example: Bad Request
        message:
          type: string
          example: Validation failed for field "code"

    Watchlist:
      type: object
      properties:
        userId:
          type: string
        currencies:
          type: array
          items:
            type: string
